function [ inv_Jac ] = inverse_jacobian( v )
%INVERSE_JACOBIAN Returns the inverse jacobian
%   This is for a three bot p,q,beta cluster, in aero frame

theta_c = v(1);
p = v(2);
q = v(3);
beta1 = v(4);

inv_Jac = [ 1, 0, -(sin(theta_c)*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2))/3, (cos(theta_c)*(2*p + 2*q*cos(beta1)))/(6*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)), (cos(theta_c)*(2*q + 2*p*cos(beta1)))/(6*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)), -(p*q*sin(beta1)*cos(theta_c))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)), 0, 0, 0;
 0, 1,  (cos(theta_c)*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2))/3, (sin(theta_c)*(2*p + 2*q*cos(beta1)))/(6*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)), (sin(theta_c)*(2*q + 2*p*cos(beta1)))/(6*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)), -(p*q*sin(beta1)*sin(theta_c))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)), 0, 0, 0;
 0, 0, 1, 0, 0, 0, 1, 0, 0;
 1, 0, p*cos(theta_c)*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2) + (sin(theta_c)*(2*p^2 + cos(beta1)*p*q - q^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)),   sin(theta_c)*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2) - (cos(theta_c)*(5*p*q^2 + 2*p^3 + 2*q^3*cos(beta1) + 6*p^2*q*cos(beta1) + p*q^2*cos(beta1)^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) + (p*q^2*sin(theta_c)*(p + q*cos(beta1))*(cos(beta1)^2 - 1))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), (cos(theta_c)*(4*p^2*q + q^3 + p^3*cos(beta1) + 3*p*q^2*cos(beta1) - p^2*q*cos(beta1)^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) - (p^2*q*sin(theta_c)*(p + q*cos(beta1))*(cos(beta1)^2 - 1))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), (p*q*sin(beta1)*cos(theta_c)*(- p^2 + cos(beta1)*p*q + 2*q^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) + (p*q^2*sin(beta1)*sin(theta_c)*(p^2*cos(beta1) + p*q*cos(beta1)^2 + p*q + q^2*cos(beta1)))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), 0, 0, 0;
 0, 1, p*sin(theta_c)*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2) - (cos(theta_c)*(2*p^2 + cos(beta1)*p*q - q^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)), - cos(theta_c)*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2) - (sin(theta_c)*(5*p*q^2 + 2*p^3 + 2*q^3*cos(beta1) + 6*p^2*q*cos(beta1) + p*q^2*cos(beta1)^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) - (p*q^2*cos(theta_c)*(p + q*cos(beta1))*(cos(beta1)^2 - 1))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), (sin(theta_c)*(4*p^2*q + q^3 + p^3*cos(beta1) + 3*p*q^2*cos(beta1) - p^2*q*cos(beta1)^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) + (p^2*q*cos(theta_c)*(p + q*cos(beta1))*(cos(beta1)^2 - 1))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), (p*q*sin(beta1)*sin(theta_c)*(- p^2 + cos(beta1)*p*q + 2*q^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) - (p*q^2*sin(beta1)*cos(theta_c)*(p^2*cos(beta1) + p*q*cos(beta1)^2 + p*q + q^2*cos(beta1)))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(q^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), 0, 0, 0;
 0, 0, 1, 0, 0, 0, 0, 1, 0;
 1, 0, (sin(theta_c)*(- p^2 + cos(beta1)*p*q + 2*q^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)) - q*cos(theta_c)*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2),                                                                                       (cos(theta_c)*(4*p*q^2 + p^3 + q^3*cos(beta1) + 3*p^2*q*cos(beta1) - p*q^2*cos(beta1)^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) + (p*q^2*sin(theta_c)*(q + p*cos(beta1))*(cos(beta1)^2 - 1))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), - sin(theta_c)*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2) - (cos(theta_c)*(5*p^2*q + 2*q^3 + 2*p^3*cos(beta1) + 6*p*q^2*cos(beta1) + p^2*q*cos(beta1)^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) - (p^2*q*sin(theta_c)*(q + p*cos(beta1))*(cos(beta1)^2 - 1))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)),   (p*q*sin(beta1)*cos(theta_c)*(2*p^2 + cos(beta1)*p*q - q^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) - (p^2*q*sin(beta1)*sin(theta_c)*(p^2*cos(beta1) + p*q*cos(beta1)^2 + p*q + q^2*cos(beta1)))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), 0, 0, 0;
 0, 1, - q*sin(theta_c)*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2) - (cos(theta_c)*(- p^2 + cos(beta1)*p*q + 2*q^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(1/2)), (sin(theta_c)*(4*p*q^2 + p^3 + q^3*cos(beta1) + 3*p^2*q*cos(beta1) - p*q^2*cos(beta1)^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) - (p*q^2*cos(theta_c)*(q + p*cos(beta1))*(cos(beta1)^2 - 1))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)),   cos(theta_c)*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2) - (sin(theta_c)*(5*p^2*q + 2*q^3 + 2*p^3*cos(beta1) + 6*p*q^2*cos(beta1) + p^2*q*cos(beta1)^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) + (p^2*q*cos(theta_c)*(q + p*cos(beta1))*(cos(beta1)^2 - 1))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)),   (p*q*sin(beta1)*sin(theta_c)*(2*p^2 + cos(beta1)*p*q - q^2))/(3*(p^2 + 2*cos(beta1)*p*q + q^2)^(3/2)) + (p^2*q*sin(beta1)*cos(theta_c)*(p^2*cos(beta1) + p*q*cos(beta1)^2 + p*q + q^2*cos(beta1)))/((p^2 + 2*cos(beta1)*p*q + q^2)^2*(-(p^2*(cos(beta1)^2 - 1))/(p^2 + 2*cos(beta1)*p*q + q^2))^(1/2)), 0, 0, 0;
 0, 0, 1, 0, 0, 0, 0, 0, 1];


end

